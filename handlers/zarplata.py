
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è (—ç—Ç–∞–ø—ã)
class SalaryCalc(StatesGroup):
    deposit = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
back_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Web App
@router.message(Command("cash"))
async def open_cash_webapp(message: types.Message):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω Replit –¥–ª—è Web App  
    repl_url = "https://python-template-paudinulibot.replit.app/webapp/"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å CASH üíµ", web_app=WebAppInfo(url=repl_url))]
    ])
    await message.answer(
        "üíº <b>CASH - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n\n"
        "–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–≤–æ—é –∑–∞—Ä–ø–ª–∞—Ç—É —Å —É—á–µ—Ç–æ–º:\n"
        "‚Ä¢ –ù–î–§–õ (13%, 15%, 30%)\n"
        "‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤\n"
        "‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã—Ö –≤—ã—á–µ—Ç–æ–≤\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
@router.message(F.web_app_data)
async def handle_webapp_data(message: types.Message):
    import json
    
    try:
        data = json.loads(message.web_app_data.data)
        
        deposit = data.get('deposit', 0)
        fee_percent = data.get('feePercent', 0)
        fee = data.get('fee', 0)
        net_amount = data.get('netAmount', 0)
        usd_rate = data.get('usdRate', 0)
        usd_amount = data.get('usdAmount', 0)
        salary_percent = data.get('salaryPercent', 0)
        salary_fund = data.get('salaryFund', 0)
        participants = data.get('participants', 0)
        per_person = data.get('perPerson', 0)
        
        result_text = (
            f"üíµ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n\n"
            f"üí∞ <b>–ö–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É: ${per_person:.2f}</b>\n\n"
            f"üìä <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞:</b>\n"
            f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: {deposit:,.0f} ‚ÇΩ\n"
            f"‚Ä¢ –£–¥–µ—Ä–∂–∞–Ω–∏–µ ({fee_percent}%): {fee:,.0f} ‚ÇΩ\n"
            f"‚Ä¢ –ß–∏—Å—Ç–∞—è —Å—É–º–º–∞: {net_amount:,.0f} ‚ÇΩ\n"
            f"‚Ä¢ –í –¥–æ–ª–ª–∞—Ä–∞—Ö (–∫—É—Ä—Å {usd_rate}): ${usd_amount:.2f}\n"
            f"‚Ä¢ –§–æ–Ω–¥ –∑–∞—Ä–ø–ª–∞—Ç—ã ({salary_percent}%): ${salary_fund:.2f}\n"
            f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants} —á–µ–ª.\n\n"
            f"‚úÖ <b>–ò—Ç–æ–≥–æ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ: ${per_person:.2f}</b>"
        )
        
        await message.answer(result_text, parse_mode="HTML")
        
    except (json.JSONDecodeError, KeyError) as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
@router.message(F.text == "/zarplata")
async def start_salary_calc(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:", reply_markup=back_kb)
    await state.set_state(SalaryCalc.deposit)
