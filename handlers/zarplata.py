
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è (—ç—Ç–∞–ø—ã)
class SalaryCalc(StatesGroup):
    deposit = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
back_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Web App
@router.message(Command("cash"))
async def open_cash_webapp(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å CASH üíµ", web_app=WebAppInfo(url="https://zarplata-one.vercel.app/"))]
    ])
    await message.answer(
        "üíº <b>CASH - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n\n"
        "–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–≤–æ—é –∑–∞—Ä–ø–ª–∞—Ç—É —Å —É—á–µ—Ç–æ–º:\n"
        "‚Ä¢ –ù–î–§–õ (13%, 15%, 30%)\n"
        "‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤\n"
        "‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã—Ö –≤—ã—á–µ—Ç–æ–≤\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
@router.message(F.web_app_data)
async def handle_webapp_data(message: types.Message):
    import json
    
    try:
        data = json.loads(message.web_app_data.data)
        
        gross_salary = data.get('grossSalary', 0)
        net_salary = data.get('netSalary', 0)
        income_tax = data.get('incomeTax', 0)
        social_contributions = data.get('socialContributions', 0)
        tax_rate = data.get('taxRate', 13)
        deductions = data.get('deductions', 0)
        
        result_text = (
            f"üí∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n\n"
            f"üìä <b>–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ –≤—ã—á–µ—Ç–æ–≤:</b> {gross_salary:,.0f} ‚ÇΩ\n"
            f"üìã <b>–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b> {tax_rate}%\n"
        )
        
        if deductions > 0:
            result_text += f"üí≥ <b>–ù–∞–ª–æ–≥–æ–≤—ã–µ –≤—ã—á–µ—Ç—ã:</b> {deductions:,.0f} ‚ÇΩ\n"
        
        result_text += (
            f"\nüí∏ <b>–£–¥–µ—Ä–∂–∞–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ù–î–§–õ: {income_tax:,.0f} ‚ÇΩ\n"
            f"‚Ä¢ –°–æ—Ü. –≤–∑–Ω–æ—Å—ã: {social_contributions:,.0f} ‚ÇΩ\n\n"
            f"‚úÖ <b>–ö –≤—ã–¥–∞—á–µ –Ω–∞ —Ä—É–∫–∏: {net_salary:,.0f} ‚ÇΩ</b>"
        )
        
        await message.answer(result_text, parse_mode="HTML")
        
    except (json.JSONDecodeError, KeyError) as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
@router.message(F.text == "/zarplata")
async def start_salary_calc(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:", reply_markup=back_kb)
    await state.set_state(SalaryCalc.deposit)
